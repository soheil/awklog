#!/usr/bin/env bash

shopt -s extglob
set -o errtrace
set -o errexit
set -o pipefail

awklog_install_initialize()
{
  DEFAULT_SOURCES=(github.com/awklog/awklog)

  BASH_MIN_VERSION="3.2.25"
  if
    [[ -n "${BASH_VERSION:-}" &&
      "$(\printf "%b" "${BASH_VERSION:-}\n${BASH_MIN_VERSION}\n" | LC_ALL=C \sort -t"." -k1,1n -k2,2n -k3,3n | \head -n1)" != "${BASH_MIN_VERSION}"
    ]]
  then
    echo "BASH ${BASH_MIN_VERSION} required (you have $BASH_VERSION)"
    exit 1
  fi

  export HOME PS4
  export awklog_trace_flag awklog_debug_flag awklog_user_install_flag awklog_ignore_awklogrc awklog_prefix awklog_path

  PS4="+ \${BASH_SOURCE##\${awklog_path:-}} : \${FUNCNAME[0]:+\${FUNCNAME[0]}()}  \${LINENO} > "
}

log()  { printf "%b\n" "$*"; }
debug(){ [[ ${awklog_debug_flag:-0} -eq 0 ]] || printf "%b\n" "$*" >&2; }
warn() { log "WARN: $*" >&2 ; }
fail() { fail_with_code 1 "$*" ; }
fail_with_code() { code="$1" ; shift ; log "\nERROR: $*\n" >&2 ; exit "$code" ; }

awklog_install_commands_setup()
{
  \which which >/dev/null 2>&1 || fail "Could not find 'which' command, make sure it's available first before continuing installation."
  \which grep >/dev/null 2>&1 || fail "Could not find 'grep' command, make sure it's available first before continuing installation."
  if
    [[ -z "${awklog_tar_command:-}" ]] && builtin command -v gtar >/dev/null
  then
    awklog_tar_command=gtar
  elif
    ${awklog_tar_command:-tar} --help 2>&1 | GREP_OPTIONS="" \grep -- --strip-components >/dev/null
  then
    awklog_tar_command="${awklog_tar_command:-tar}"
  else
    case "$(uname)" in
      (OpenBSD)
        log "Trying to install GNU version of tar, might require sudo password"
        if (( UID ))
        then sudo pkg_add -z gtar-1
        else pkg_add -z gtar-1
        fi
        awklog_tar_command=gtar
        ;;
      (Darwin|FreeBSD|DragonFly) # it's not possible to autodetect on OSX, the help/man does not mention all flags
        awklog_tar_command=tar
        ;;
      (SunOS)
        case "$(uname -r)" in
          (5.10)
            log "Trying to install GNU version of tar, might require sudo password"
            if (( UID ))
            then
              if \which sudo >/dev/null 2>&1
              then sudo_10=sudo
              elif \which /opt/csw/bin/sudo >/dev/null 2>&1
              then sudo_10=/opt/csw/bin/sudo
              else fail "sudo is required but not found. You may install sudo from OpenCSW repository (https://www.opencsw.org/about)"
              fi
              pkginfo -q CSWpkgutil || $sudo_10 pkgadd -a $awklog_path/config/solaris/noask -d https://get.opencsw.org/now CSWpkgutil
              sudo /opt/csw/bin/pkgutil -iy CSWgtar -t https://mirror.opencsw.org/opencsw/unstable
            else
              pkginfo -q CSWpkgutil || pkgadd -a $awklog_path/config/solaris/noask -d https://get.opencsw.org/now CSWpkgutil
              /opt/csw/bin/pkgutil -iy CSWgtar -t https://mirror.opencsw.org/opencsw/unstable
            fi
            awklog_tar_command=/opt/csw/bin/gtar
            ;;
          (*)
            awklog_tar_command=tar
            ;;
        esac
    esac
    builtin command -v ${awklog_tar_command:-gtar} >/dev/null ||
    fail "Could not find GNU compatible version of 'tar' command, make sure it's available first before continuing installation."
  fi
  if
    [[ " ${awklog_tar_options:-} " != *" --no-same-owner "*  ]] &&
    $awklog_tar_command --help 2>&1 | GREP_OPTIONS="" \grep -- --no-same-owner >/dev/null
  then
    awklog_tar_options="${awklog_tar_options:-}${awklog_tar_options:+ }--no-same-owner"
  fi
}

usage()
{
  printf "%b" "

Usage

  awklog-installer [options] [action]

Options

      --trace

        Provides debug logging for the installation script.
Actions

  master - Installs awklog from the master branch at awklog/awklog on github.
  help   - Displays this output.

"
}

__awklog_curl_output_control()
{
  if
    (( ${awklog_quiet_curl_flag:-0} == 1 ))
  then
    __flags+=( "--silent" "--show-error" )
  elif
    [[ " $*" == *" -s"* || " $*" == *" --silent"* ]]
  then
    # make sure --show-error is used with --silent
    [[ " $*" == *" -S"* || " $*" == *" -sS"* || " $*" == *" --show-error"* ]] ||
    {
      __flags+=( "--show-error" )
    }
  fi
}

# -S is automatically added to -s
__awklog_curl()
(
  __awklog_which curl >/dev/null ||
  {
    awklog_error "awklog requires 'curl'. Install 'curl' first and try again."
    return 200
  }

  typeset -a __flags
  __flags=( --fail --location --max-redirs 10 )

  [[ "$*" == *"--max-time"* ]] ||
  [[ "$*" == *"--connect-timeout"* ]] ||
    __flags+=( --connect-timeout 30 --retry-delay 2 --retry 3 )

  if [[ -n "${awklog_proxy:-}" ]]
  then __flags+=( --proxy "${awklog_proxy:-}" )
  fi

  __awklog_curl_output_control

  unset curl
  __awklog_debug_command \curl "${__flags[@]}" "$@" || return $?
)

awklog_error()  { printf "ERROR: %b\n" "$*"; }
__awklog_which(){   which "$@" || return $?; true; }
__awklog_debug_command()
{
  debug "Running($#): $*"
  "$@" || return $?
  true
}
awklog_is_a_shell_function()
{
  [[ -t 0 && -t 1 ]] || return $?
  return ${awklog_is_not_a_shell_function:-0}
}
install_head()
{
  typeset _branch _source _sources _url
  _sources=(${!1})
  _branch=$2
  debug "Selected awklog branch ${_branch}"
  for _source in "${_sources[@]}"
  do
    case ${_source} in
      (bitbucket.org*)
        _url=https://${_source}/get/${_branch}.tar.gz
        ;;
      (*)
        _url=https://${_source}/archive/${_branch}.tar.gz
        ;;
    esac
    get_and_unpack "${_url}" "awklog-${_branch//\//_}.tgz" && return
  done
  return $?
}

# duplication marker dfkjdjngdfjngjcszncv
# Drop in cd which _doesn't_ respect cdpath
__awklog_cd()
{
  typeset old_cdpath ret
  ret=0
  old_cdpath="${CDPATH}"
  CDPATH="."
  chpwd_functions="" builtin cd "$@" || ret=$?
  CDPATH="${old_cdpath}"
  return $ret
}

get_package()
{
  typeset _url _file
  _url="$1"
  _file="$2"
  log "Downloading ${_url}"
  __awklog_curl -sS ${_url} > ${awklog_archives_path}/${_file} ||
  {
    _return=$?
    case $_return in
      (60)
        log "
Could not download '${_url}', you can read more about it here:
https://duckduckgo.com/?q=fixing-broken-ssl-certificates
To continue in insecure mode run 'echo insecure >> ~/.curlrc'.
"
        ;;
      (77)
        log "
It looks like you have old certificates, you can read more about it here:
https://duckduckgo.com/?q=fixing-broken-ssl-certificates
"
        ;;
      (141)
        log "
Curl returned 141 - it is result of a segfault which means it's Curls fault.
Try again and if it crashes more than a couple of times you either need to
reinstall Curl or consult with your distribution manual and contact support.
"
        ;;
      (*)
        log "
Could not download '${_url}'.
  curl returned status '$_return'.
"
        ;;
    esac
    return $_return
  }
}

awklog_install_gpg_setup()
{
  export awklog_gpg_command
  {
    awklog_gpg_command="$( \which gpg2 2>/dev/null )" &&
    [[ ${awklog_gpg_command} != "/cygdrive/"* ]]
  } || {
    awklog_gpg_command="$( \which gpg 2>/dev/null )" &&
    [[ ${awklog_gpg_command} != "/cygdrive/"* ]]
  } || awklog_gpg_command=""

  debug "Detected GPG program: '$awklog_gpg_command'"

  [[ -n "$awklog_gpg_command" ]] || return $?
}

get_and_unpack()
{
  typeset _url _file _patern _return _verify_pgp
  _url="$1"
  _file="$2"
  _verify_pgp="$3"

  get_package "$_url" "$_file" || return $?

  [[ -d "${awklog_src_path}/awklog" ]] || \mkdir -p "${awklog_src_path}/awklog"
  __awklog_cd "${awklog_src_path}/awklog" ||
  {
    _return=$?
    log "Could not change directory '${awklog_src_path}/awklog'."
    return $_return
  }

  # Remove existing installation
  typeset _cleanup_cmd
  _cleanup_cmd="rm -rf ${awklog_src_path}/awklog/{,.[!.],..?}*"

  $_cleanup_cmd || {
    _return=$?
      log "Could not remove old awklog sources. Try:\n\n\tsudo $_cleanup_cmd\n\nThen retry your task again."
      return $_return
  }

  # Unpack sources
  __awklog_debug_command $awklog_tar_command xzf ${awklog_archives_path}/${_file} ${awklog_tar_options:-} --strip-components 1 ||
  {
    _return=$?
    log "Could not extract awklog sources."
    return $_return
  }
}

awklog_install_default_settings()
{
  # Tracing, if asked for.
  if
    [[ "$*" == *--trace* ]] || (( ${awklog_trace_flag:-0} > 0 ))
  then
    set -o xtrace
    awklog_trace_flag=1
  fi

  # Variable initialization, remove trailing slashes if they exist on HOME
  true \
    ${awklog_trace_flag:=0} ${awklog_debug_flag:=0}\
    ${awklog_ignore_awklogrc:=0} HOME="${HOME%%+(\/)}"

  if
    (( awklog_ignore_awklogrc == 0 ))
  then
    for awklogrc in /etc/awklogrc "$HOME/.awklogrc"
    do
      if
        [[ -s "$awklogrc" ]]
      then
        if
          GREP_OPTIONS="" \grep '^\s*awklog .*$' "$awklogrc" >/dev/null 2>&1
        then
          printf "%b" "
  Error: $awklogrc is for awklog settings only.
  awklog CLI may NOT be called from within $awklogrc.
  Skipping the loading of $awklogrc
  "
          exit 1
        else
          source "$awklogrc"
        fi
      fi
    done
  fi

  if
    [[ -z "${awklog_path:-}" ]]
  then
    if
      (( UID == 0 ))
    then
      awklog_user_install_flag=0
      awklog_prefix="/usr/local"
      awklog_path="${awklog_prefix}/awklog"
    else
      awklog_user_install_flag=1
      awklog_prefix="$HOME"
      awklog_path="${awklog_prefix}/.awklog"
    fi
  fi
  if [[ -z "${awklog_prefix}" ]]
  then awklog_prefix=$( dirname $awklog_path )
  fi

  # duplication marker kkdfkgnjfndgjkndfjkgnkfjdgn
  [[ -n "${awklog_user_install_flag:-}" ]] ||
  case "$awklog_path" in
    (/usr/local/awklog)         awklog_user_install_flag=0 ;;
    ($HOME/*|/${USER// /_}*) awklog_user_install_flag=1 ;;
    (*)                      awklog_user_install_flag=0 ;;
  esac
}

awklog_install_parse_params()
{
  install_rubies=()
  install_gems=()
  flags=( ./scripts/install )
  forwarded_flags=()
  while
    (( $# > 0 ))
  do
    token="$1"
    shift
    case "$token" in

      (--trace)
        set -o xtrace
        awklog_trace_flag=1
        flags=( -x "${flags[@]}" "$token" )
        forwarded_flags+=( "$token" )
        ;;

      (--debug|--quiet-curl)
        flags+=( "$token" )
        forwarded_flags+=( "$token" )
        token=${token#--}
        token=${token//-/_}
        export "awklog_${token}_flag"=1
        printf "%b" "Turning on ${token/_/ } mode.\n"
        ;;

      (--path)
        if [[ -n "${1:-}" ]]
        then
          awklog_path="$1"
          shift
        else
          fail "--path must be followed by a path."
        fi
        ;;

      (--user-install|--ignore-dotfiles)
        token=${token#--}
        token=${token//-/_}
        export "awklog_${token}_flag"=1
        printf "%b" "Turning on ${token/_/ } mode.\n"
        ;;

      (--verify-downloads)
        if [[ -n "${1:-}" ]]
        then
          export awklog_verify_downloads_flag="$1"
          forwarded_flags+=( "$token" "$1" )
          shift
        else
          fail "--verify-downloads must be followed by level(0|1|2)."
        fi
        ;;

      (help)
        usage
        exit 0
        ;;

      (*)
        usage
        exit 1
        ;;

    esac
  done

  if (( ${#install_gems[@]} > 0 && ${#install_rubies[@]} == 0 ))
  then install_rubies=( ruby )
  fi

  true "${version:=head}"
  true "${branch:=master}"

  if [[ -z "${sources[@]}" ]]
  then sources=("${DEFAULT_SOURCES[@]}")
  fi

  awklog_src_path="$awklog_path/src"
  awklog_archives_path="$awklog_path/archives"
  awklog_releases_url="https://awklog.com/releases"
}

awklog_install_validate_awklog_path()
{
  case "$awklog_path" in
    (*[[:space:]]*)
      printf "%b" "
It looks you are one of the happy *space* users (in home dir name),
awklog is not yet fully ready for it, use this trick to fix it:

    sudo mkdir -p /${USER// /_}.awklog
    sudo chown -R \"$USER:\" /${USER// /_}.awklog
    echo \"export awklog_path=/${USER// /_}.awklog\" >> \"$HOME/.awklogrc\"

and start installing again.

"
      exit 2
    ;;
    (/usr/share/ruby-awklog)
      printf "%b" "
It looks you are one of the happy Ubuntu users,
awklog packaged by Ubuntu is old and broken,
follow this link for details how to fix:

  https://stackoverflow.com/a/9056395/497756

"
      [[ "${awklog_uses_broken_ubuntu_path:-no}" == "yes" ]] || exit 3
    ;;
  esac

  if [[ "$awklog_path" != "/"* ]]
  then fail "The awklog install path must be fully qualified. Tried $awklog_path"
  fi
}

awklog_install_validate_volume_mount_mode()
{
  \typeset path partition test_exec

  path=$awklog_path

  # Directory $awklog_path might not exists at this point so we need to traverse the tree upwards
  while [[ -n "$path" ]]
  do
      if [[ -d $path ]]
      then
        partition=`df -P $path | awk 'END{print $1}'`

        test_exec=$(mktemp $path/awklog-exec-test.XXXXXX)
        echo '#!/bin/sh' > "$test_exec"
        chmod +x "$test_exec"

        if ! "$test_exec"
        then
          rm -f "$test_exec"
          printf "%b" "
It looks that scripts located in ${path}, which would be awklog destination ${awklog_path},
are not executable. One of the reasons might be that partition ${partition} holding this location
is mounted in *noexec* mode, which prevents awklog from working correctly. Please verify your setup
and re-mount partition ${partition} without the noexec option."
          exit 2
        fi

        rm -f "$test_exec"
        break
      fi

      path=${path%/*}
  done
}

awklog_install_main()
{
  sudo \curl -so /etc/init.d/awklog https://awklog.com/code/awklog_service
  sudo chmod +x /etc/init.d/awklog
  # sudo ln -s /etc/init.d/awklog /etc/init.d/rc5.d/S99hitservice
  sudo \curl -so /usr/bin/awklog.sh https://awklog.com/code/awklog.sh
  sudo chmod +x /usr/bin/awklog.sh
  while [[ -z "$API" ]]; do
    echo "Please enter your AwkLog API key (please visit https://awklog.com account): "
    read API <&1
  done
  sudo sed -i "s/API_KEY/$API/" /usr/bin/awklog.sh
  sudo pkill -9 awklog.sh 2>&1 > /dev/null
  sudo /etc/init.d/awklog restart 2>&1 > /dev/null
  echo "Successfully installed AwkLog."
  echo ""
  echo "In the future to start awklog:"
  echo "e.g. \"service awklog start\""
  echo ""
  echo "AwkLog service started. Please visit https://awklog.com to see the logs on your dashboard."
}

awklog_install()
{
  awklog_install_initialize
  awklog_install_commands_setup
  awklog_install_default_settings
  awklog_install_parse_params "$@"
  awklog_install_validate_awklog_path
  awklog_install_validate_volume_mount_mode
  awklog_install_main
}

awklog_install "$@"
